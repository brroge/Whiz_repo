AWSTemplateFormatVersion: 2010-09-09
Description: >
  Secure Joomla Two-Tier Architecture with Cognito authentication, Auto Scaling,
  RDS MySQL, ACM/Route53, WAF, and CloudFront (validated with brrogers.com setup)

Parameters:
  StackNamePrefix:
    Type: String
    Default: awork02
  KeyPairName:
    Type: String
    Default: Ubuntu-awork
    Description: Existing EC2 key pair for SSH access
  AmiId:
    Type: AWS::EC2::Image::Id
    Default: ami-0b8b44ec9a8f90422
    Description: Ubuntu 22.04 LTS (us-east-2)
  DBUsername:
    Type: String
    Default: admin
  DBPassword:
    Type: String
    NoEcho: true
    Default: Welcome456*
  HostedZoneId:
    Type: String
    Default: Z0898109S34CUXKAVRO0
    Description: Existing Route53 Hosted Zone ID for brrogers.com
  DomainName:
    Type: String
    Default: brrogers.com
  CloudFrontCertArn:
    Type: String
    Default: arn:aws:acm:us-east-1:053579055459:certificate/542a6b58-cc70-4511-b5b4-2cc808c64b13
    Description: Existing ACM certificate in us-east-1 (for CloudFront only)

Resources:
  # ------------------- VPC / Subnets / Routing -------------------
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags: [{ Key: Name, Value: !Sub "${StackNamePrefix}-vpc" }]

  IGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags: [{ Key: Name, Value: !Sub "${StackNamePrefix}-igw" }]

  AttachIGW:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref IGW
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: us-east-2a
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      Tags: [{ Key: Name, Value: !Sub "${StackNamePrefix}-public-az1" }]

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: us-east-2b
      CidrBlock: 10.0.3.0/24
      MapPublicIpOnLaunch: true
      Tags: [{ Key: Name, Value: !Sub "${StackNamePrefix}-public-az2" }]

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: us-east-2a
      CidrBlock: 10.0.2.0/24
      Tags: [{ Key: Name, Value: !Sub "${StackNamePrefix}-private-az1" }]

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: us-east-2b
      CidrBlock: 10.0.4.0/24
      Tags: [{ Key: Name, Value: !Sub "${StackNamePrefix}-private-az2" }]

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags: [{ Key: Name, Value: !Sub "${StackNamePrefix}-public-rt" }]

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachIGW
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IGW

  AssocPublic1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  AssocPublic2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  # ------------------- Security Groups -------------------
  SGAlb:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP/HTTPS
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - { IpProtocol: tcp, FromPort: 80,  ToPort: 80,  CidrIp: 0.0.0.0/0 }
        - { IpProtocol: tcp, FromPort: 443, ToPort: 443, CidrIp: 0.0.0.0/0 }

  SGWeb:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Joomla web access
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - { IpProtocol: tcp, FromPort: 80,  ToPort: 80,  SourceSecurityGroupId: !Ref SGAlb }
        - { IpProtocol: tcp, FromPort: 443, ToPort: 443, SourceSecurityGroupId: !Ref SGAlb }
      SecurityGroupEgress:
        - { IpProtocol: -1, CidrIp: 0.0.0.0/0 }

  SGDb:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow MySQL from web
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - { IpProtocol: tcp, FromPort: 3306, ToPort: 3306, SourceSecurityGroupId: !Ref SGWeb }

  # ------------------- RDS -------------------
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Joomla DB Subnets
      SubnetIds: [ !Ref PrivateSubnet1, !Ref PrivateSubnet2 ]

  MySqlDB:
    Type: AWS::RDS::DBInstance
    DeletionPolicy: Snapshot
    Properties:
      DBInstanceIdentifier: !Sub "${StackNamePrefix}-joomla-db"
      Engine: mysql
      EngineVersion: 8.0.42
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      DBInstanceClass: db.t3.micro
      AllocatedStorage: 20
      MultiAZ: true
      PubliclyAccessible: false
      VPCSecurityGroups: [ !Ref SGDb ]
      DBSubnetGroupName: !Ref DBSubnetGroup
      BackupRetentionPeriod: 7

  # ------------------- ACM (regional for ALB) + ALB + TG -------------------
  ALBCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Ref DomainName
      SubjectAlternativeNames:
        - !Sub "*.${DomainName}"
      ValidationMethod: DNS

  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub "${StackNamePrefix}-ALB"
      Scheme: internet-facing
      Type: application
      SecurityGroups: [ !Ref SGAlb ]
      Subnets: [ !Ref PublicSubnet1, !Ref PublicSubnet2 ]

  TargetGroup80:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Protocol: HTTP
      Port: 80
      TargetType: instance
      VpcId: !Ref VPC
      HealthCheckPath: /

  # ------------------- EC2 + Auto Scaling -------------------
  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub "${StackNamePrefix}-lt"
      LaunchTemplateData:
        ImageId: !Ref AmiId
        InstanceType: t3.micro
        KeyName: !Ref KeyPairName
        SecurityGroupIds: [ !Ref SGWeb ]
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            apt update -y
            apt install -y apache2 php php-mysql php-xml php-mbstring php-curl unzip wget
            systemctl enable apache2 && systemctl start apache2
            cd /tmp && wget https://downloads.joomla.org/latest.zip -O joomla.zip
            unzip joomla.zip -d /var/www/html/
            chown -R www-data:www-data /var/www/html && chmod -R 755 /var/www/html
            systemctl restart apache2

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: [ !Ref PublicSubnet1, !Ref PublicSubnet2 ]
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      MinSize: "2"
      MaxSize: "5"
      DesiredCapacity: "2"
      TargetGroupARNs: [ !Ref TargetGroup80 ]

  # ------------------- ALB Listeners -------------------
  ListenerHTTP:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: redirect
          RedirectConfig:
            Protocol: HTTPS
            Port: "443"
            StatusCode: HTTP_301

  ListenerHTTPS:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ALB
      Port: 443
      Protocol: HTTPS
      Certificates: [ { CertificateArn: !Ref ALBCertificate } ]
      DefaultActions:
        - Type: authenticate-cognito
          Order: 1
          AuthenticateCognitoConfig:
            UserPoolArn: !GetAtt UserPool.Arn
            UserPoolClientId: !Ref UserPoolClient
            UserPoolDomain: !Ref UserPoolDomain
            OnUnauthenticatedRequest: authenticate
        - Type: forward
          Order: 2
          TargetGroupArn: !Ref TargetGroup80

  # ------------------- Cognito -------------------
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub "${StackNamePrefix}-user-pool"
      UsernameAttributes: [ email ]
      AutoVerifiedAttributes: [ email ]

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Sub "${StackNamePrefix}-app-client"
      UserPoolId: !Ref UserPool
      GenerateSecret: true
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthFlows: [ code ]
      AllowedOAuthScopes: [ email, openid, phone ]
      CallbackURLs:
        - !Sub "https://${DomainName}/oauth2/idpresponse"
        - !Sub "https://www.${DomainName}/oauth2/idpresponse"
        - !Sub "https://${ALB.DNSName}/oauth2/idpresponse"
        - !Sub "https://${CloudFrontDistribution.DomainName}/oauth2/idpresponse"
      LogoutURLs:
        - !Sub "https://${DomainName}"
        - !Sub "https://www.${DomainName}"
        - !Sub "https://${ALB.DNSName}"
        - !Sub "https://${CloudFrontDistribution.DomainName}"
      SupportedIdentityProviders: [ COGNITO ]

  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: !Sub "${StackNamePrefix}-auth"
      UserPoolId: !Ref UserPool

  # ------------------- WAF (Regional for ALB) -------------------
  WAFWebACL:
    Type: AWS::WAFv2::WebACL
    Properties:
      Name: !Sub "${StackNamePrefix}-webacl"
      Scope: REGIONAL
      Description: This Web ACL was created as a result of enabling the WAF integration for ALB awork02-ALB
      DefaultAction: { Allow: {} }
      VisibilityConfig:
        CloudWatchMetricsEnabled: true
        MetricName: !Sub "${StackNamePrefix}-webacl"
        SampledRequestsEnabled: true
      Rules:
        - Name: AWS-AWSManagedRulesAmazonIpReputationList
          Priority: 0
          OverrideAction: { None: {} }
          Statement:
            ManagedRuleGroupStatement:
              VendorName: AWS
              Name: AWSManagedRulesAmazonIpReputationList
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: Reputation
        - Name: AWS-AWSManagedRulesCommonRuleSet
          Priority: 1
          OverrideAction: { None: {} }
          Statement:
            ManagedRuleGroupStatement:
              VendorName: AWS
              Name: AWSManagedRulesCommonRuleSet
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: CommonRules
        - Name: AWS-AWSManagedRulesKnownBadInputsRuleSet
          Priority: 2
          OverrideAction: { None: {} }
          Statement:
            ManagedRuleGroupStatement:
              VendorName: AWS
              Name: AWSManagedRulesKnownBadInputsRuleSet
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: BadInputs

  WAFAlbAssociation:
    Type: AWS::WAFv2::WebACLAssociation
    Properties:
      ResourceArn: !Ref ALB
      WebACLArn: !GetAtt WAFWebACL.Arn

  # ------------------- CloudFront + Route53 -------------------
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        Comment: brrogers.com CloudFront + ALB
        Aliases: [ brrogers.com, www.brrogers.com ]
        HttpVersion: http2
        ViewerCertificate:
          AcmCertificateArn: !Ref CloudFrontCertArn
          SslSupportMethod: sni-only
          MinimumProtocolVersion: TLSv1.2_2021
        Origins:
          - Id: JoomlaOrigin
            DomainName: !GetAtt ALB.DNSName
            CustomOriginConfig:
              HTTPSPort: 443
              OriginProtocolPolicy: https-only
              OriginSSLProtocols: [ TLSv1.2 ]
        DefaultCacheBehavior:
          TargetOriginId: JoomlaOrigin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods: [ GET, HEAD, OPTIONS, PUT, POST, PATCH, DELETE ]
          CachedMethods: [ GET, HEAD, OPTIONS ]
          CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad           # AWS Managed: CachingDisabled
          OriginRequestPolicyId: 216adef6-5c7f-47e4-b989-5492eafa07d3   # AWS Managed: AllViewerExceptHostHeader

  RootAliasRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: brrogers.com
      Type: A
      AliasTarget:
        DNSName: !GetAtt CloudFrontDistribution.DomainName
        HostedZoneId: Z2FDTNDATAQYW2

  WwwAliasRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: www.brrogers.com
      Type: A
      AliasTarget:
        DNSName: !GetAtt CloudFrontDistribution.DomainName
        HostedZoneId: Z2FDTNDATAQYW2

Outputs:
  WebsiteURL:
    Value: !Sub "https://${DomainName}"
  CloudFrontDomain:
    Value: !GetAtt CloudFrontDistribution.DomainName
  ALBDNS:
    Value: !GetAtt ALB.DNSName
  RdsEndpoint:
    Value: !GetAtt MySqlDB.Endpoint.Address
  CognitoDomainURL:
    Description: Cognito Hosted Login Page
    Value: !Sub "https://${StackNamePrefix}-auth.auth.${AWS::Region}.amazoncognito.com/login?client_id=${UserPoolClient}&response_type=code&scope=openid&redirect_uri=https://${DomainName}/oauth2/idpresponse"
  CognitoSignOutURL:
    Description: Cognito Hosted Sign-Out URL
    Value: !Sub "https://${StackNamePrefix}-auth.auth.${AWS::Region}.amazoncognito.com/logout?client_id=${UserPoolClient}&logout_uri=https://${DomainName}"
